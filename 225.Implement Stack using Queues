//all operations are valid (for example, no pop or top operations will be called on an empty stack).
class MyStack {

    private Queue<Integer> queue = new LinkedList<>();
    private Queue<Integer> queueHelper = new LinkedList<>();
    private int topValue;

    public MyStack() {

    }

    public void push(int x) {
        topValue = x;
        queue.add(x);
    }

    public int pop() {
        //move elements before last move into 'queueHelper'
        while (queue.size() > 1) {
            topValue = queue.poll();
            queueHelper.add(topValue);
        }
        //get the last element
        int popValue = queue.poll();
        //exchange Queue references
        Queue<Integer> temp = queue;
        queue = queueHelper;
        queueHelper = temp;
        return popValue;
    }

    public int top() {
        return topValue;
    }

    public boolean empty() {
        return queue.isEmpty();
    }
}
