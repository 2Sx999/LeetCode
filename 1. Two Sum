/*
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

*/
class Solution {
	public int[] twoSum(int[] nums, int target) {
		int firstIndex;
		int secondIndex;
		for (firstIndex = 0; firstIndex < nums.length - 1; firstIndex++) {// 因为一定有一个解,所以两个索引最多是最后两个
			secondIndex = indexOf(nums, target - nums[firstIndex], firstIndex);
			if (secondIndex >= 0) {
				return new int[] { firstIndex, secondIndex };
			}
		}
		return null;
	}

	/**
	 * 查询target在数组中的索引,从firstIndex+1开始往后找
	 * 
	 * @date 2018年5月19日 下午4:20:25
	 */
	public int indexOf(int[] nums, int target, int firstIndex) {
		for (int i = firstIndex + 1; i < nums.length; i++) {
			if (target == nums[i]) {
				return i;
			}
		}
		return -1;
	}
}
